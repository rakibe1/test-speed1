generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(MEMBER)
  speedTests    SpeedTest[]
  articles      Article[]
}

enum Role {
  USER
  ADMIN
  MEMBER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SpeedTest {
  id            String    @id @default(cuid())
  userId        String?
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  downloadSpeed Float
  uploadSpeed   Float
  ping          Int
  serverInfo    Json?
  location      String?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime  @default(now())
}

model SystemStats {
  date            DateTime @id @unique @db.Date
  totalTests      Int
  totalUsers      Int
  averageDownload Float?
  averageUpload   Float?
  averagePing     Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Article {
  id        String    @id @default(cuid())
  title     String
  content   String
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category  String?
  readTime  String?
  description String?
}
